package SearchEngine;

import java.io.IOException;
import java.util.ArrayList;

/**
 * This class is to store all the binary search tree
 * methods. It has a constructor which initialize
 * the root of the tree, and a array list, which will
 * be used later to store all the sorted scores
 */
public class BinarySearchTree {
	
	public static Node root;
	public static ArrayList<Integer> sortedScores;
	public int index1 = 0;
	
	/**
	 *  Constructor initializing the root of the tree
	 *  and the array list for storing sorted values
	 */
	public BinarySearchTree()
	{
		this.root = null;
		sortedScores = new ArrayList<Integer>();
	}
	
	/**
	 * This method is to insert a specific node z
	 * into the BST T
	 * 
	 * @param T	the tree which you want to insert node in
	 * @param z	the specific node that is being inserted into T
	 */
	public void treeInsert(BinarySearchTree T, Node z)
	{
		// Creating two new node x and y
		Node y = null;
		Node x = T.root;
		
		while (x != null)
		{
			y = x;
			if (z.key < x.key)
			{
				x = x.leftChild;
			}
			else
			{
				x = x.rightChild;
			}
		}
		z.parent = y;
		if (y == null)
		{
			T.root = z;
		}
		else if (z.key < y.key)
		{
			y.leftChild = z;
		}
		else
		{
			y.rightChild = z;
		}
	}
	
	
	/**
	 * This method is to sort the BST in order starting from the root node
	 * @param x The node where you want to start sorting
	 */
	public void inOrderTreeWalk(Node x)
	{
		if(x != null)
		{
			// Recursively call the method
			inOrderTreeWalk(x.leftChild);
			
			// Add the sorted scores into the array list for later usage
			sortedScores.add(x.key);
			
			// Print out the sorted scores
			System.out.print(x.key + ", ");
			inOrderTreeWalk(x.rightChild);
		}
	}

	/**
	 * This method is used to search a node within
	 * the BST.
	 * @param x	The node where you want to start the search
	 * @param k	The target value you want to search
	 * @return	to the found target value
	 */
	public  Node treeSearch(Node x, int k)
	{
		if (x == null || k == x.key)
			return x;
		if (k < x.key)
			return treeSearch(x.leftChild, k);
		else
			return treeSearch(x.rightChild, k);
	}
	
	/**
	 * Finds the minimum value of the tree
	 * @param	x node where the search starts
	 * @return	to the minimum value of the tree
	 */
	public Node treeMin(Node x)
	{
		while (x.leftChild != null)
			x = x.leftChild;
		return x;
	}
	
	/**
	 * Finds the maximum value of the tree
	 * @param x	node where the search starts
	 * @return	to the maximum value of the tree
	 */
	public Node treeMax(Node x)
	{
		while(x.rightChild != null)
			x = x.rightChild;
		return x;
	}
	
	
	/**
	 * Finds the successor of certain node
	 * in order to perform transplant
	 * @param x	The node which you want to find the
	 * 			successor of
	 * @return	the found successor of node x
	 */
	public Node treeSuccessor(Node x)
	{
		if (x.rightChild != null)
			return treeMin(x.rightChild);
		Node y = x.parent;
		while(y != null && x == y.rightChild)
		{
			x = y;
			y = y.parent;
		}
		return y;
	}
	
	/**
	 * Replace one subtree as a child of its parent with
	 * another subtree
	 * @param T	the tree you want to do transplant on
	 * @param u	the subtree rooted at node u being replaced
	 * @param v	the subtree rooted at node v replace
	 */
	public void transplant(BinarySearchTree T, Node u, Node v)
	{
		if (u.parent == null)
			T.root = v;
		else if (u == u.parent.leftChild)
			u.parent.leftChild = v;
		else
			u.parent.rightChild = v;
		
		if (v != null)
			v.parent = u.parent;
	}
	
	/**
	 * Deleting a certain node from the BST
	 * @param T	the BST which is used to delete node from
	 * @param z	the target node to be deleted
	 */
	public void treeDelete(BinarySearchTree T, Node z)
	{
		if (z.leftChild == null)
			transplant(T, z, z.rightChild);
		else if (z.rightChild == null)
			transplant(T, z, z.leftChild);
		else
		{
			Node y = treeMin(z.rightChild);
			if (y.parent != z)
			{
				transplant(T, y, y.rightChild);
				y.rightChild = z.rightChild;
				y.rightChild.parent = y;
			}
			transplant(T, z, y);
			y.leftChild = z.leftChild;
			y.leftChild.parent = y;
		}
		
		// Deleting the corresponding element in the 
		// array list
		for(int i = 0; i < sortedScores.size(); i ++)
		{
			if (sortedScores.get(i) == z.key)
			{
				sortedScores.remove(i);
			}
				
		}
	}
	
	/**
	 *  Tester method to test out the functionality of the method
	 *  in this class
	 * @param args
	 */
	public static void main (String[] args)
	{
		BinarySearchTree tree = new BinarySearchTree();
		
		Node z = new Node(32);
		Node a = new Node(20);
		Node b = new Node(50);
		Node c = new Node(31);
		Node d = new Node(98);
		Node e = new Node(45);
		tree.treeInsert(tree, z);
		tree.treeInsert(tree, a);
		tree.treeInsert(tree, b);
		tree.treeInsert(tree, c);
		tree.treeInsert(tree, d);
		tree.treeInsert(tree, e);
		
		// Test out the tree search
		Node target = tree.treeSearch(tree.root, 50);
		System.out.println(target.key);
		
		tree.treeDelete(tree, d);
		
		// Print the tree from top view, with the first node as the root
		tree.inOrderTreeWalk(tree.root);
		

		
	}
}
