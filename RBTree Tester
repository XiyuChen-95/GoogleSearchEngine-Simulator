package SearchEngine;

import java.util.HashMap;
import java.util.Random;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;
import java.util.ArrayList;

/**
 * Tester class to test the functionality of the RBTree methods
 * also to simulate the search engine
 * @author Yoyo
 *
 */

public class RBTreeTester {
	public static void main (String[] args)
	{
		Scanner in = new Scanner(System.in);
		Random rand = new Random();
		HashMap<Integer, String> gotUrls = new HashMap<Integer, String>();
		spider spider = new spider();
		
		int[] scoresOfUrls = new int[30];
		
		int sumOfScores = 0;
		int index1 = 0;
		int index2 = 1;
		int index3 = 1;
		int index4 = 1;
		int index5 = 1;
		int index6 = 0;
		int index8 = 0;
		int index9 = 0;
		
		// Get User inputs
		System.out.print("Enter a word you want to search: ");
		String userInputWord = in.nextLine();
		
		System.out.print("Enter a score for the first factor: ");
		int firstScore = in.nextInt();
		
		System.out.print("Enter a score for the second factor: ");
		int secondScore = in.nextInt();
		
		System.out.print("Enter a score for the third factor: ");
		int thirdScore = in.nextInt();
		
		System.out.print("Enter a score for the fourth factor: ");
		int fourthScore = in.nextInt();
		
		// Sum up the four factor scores
		sumOfScores = firstScore + secondScore + thirdScore + fourthScore;
		
		spider.search("https://www.nytimes.com/" , userInputWord);
        
		// Put the Urls and the value into a hashmap
		// Store the scores into an array
		for (String urls:spider.getUrls())
		{
			int tempScores = rand.nextInt(1000 + sumOfScores);
			scoresOfUrls[index1] = tempScores;
			gotUrls.put(tempScores, urls);
			index1++;
		}
		
		// Creating a new binary search tree object
		RBTree tree = new RBTree();
				
		// Inserting the scores as the nodes of the BST
		for (int scores:scoresOfUrls)
		{
			Node tempNode = new Node(scores);
			tree.RBInsert(tree, tempNode);
		}
		
		System.out.println("************** 30 URLs with Index starting at 1 and Scores *************");
		for(int scores:gotUrls.keySet())
		{
			
			System.out.print(index2 + ". ");
			String url = gotUrls.get(scores);
			System.out.println(url + " | [Scores]: " + scores);
			index2++;
		}
		
		
		// Testing for the insertion of RB tree
		// Allow user to enter a score and a URL
		
		System.out.println();
		System.out.println();
		
		System.out.print("Please enter the URL you want to insert: ");
		String insertUrl = in.next();
		
		System.out.println();
		
		System.out.print("Please enter the score for the URL you want to insert: ");
		int insertScore = in.nextInt();
		
		gotUrls.put(insertScore, insertUrl);
		Node insertScoreNode = new Node(insertScore);
		tree.RBInsert(tree, insertScoreNode);
		tree.inOrderTreeWalk(tree.root);
		tree.storeKeyValues(tree.root);
		
		System.out.println("************** URLs after inserting User's URL *************");
		for(int scores:tree.sortedScores)
		{
			String color = tree.colors.get(index6);
			System.out.println(index5 + ". " + gotUrls.get(scores) + " | [Scores]: " + scores + " | [Color]: " + color);
			index6++;
			index5++;

		}
		
		// Print out the sorted scores
//		tree.inOrderTreeWalk(tree.root);
//		tree.storeKeyValues(tree.root);
		System.out.println();
		
		for(int scores:tree.sortedScores)
		{
			System.out.print(scores + ", ");
		}
		
		System.out.println();
		System.out.println();
		
		System.out.println("************** 31 sorted URLs with Index starting at 1 and Scores Using BST *************");
		for(int scores:tree.sortedScores)
		{
			String color = tree.colors.get(index8);
			System.out.println(index4 + ". " + gotUrls.get(scores) + " | [Scores]: " + scores + " | [Color]: " + color);
			index8++;
			index4++;
		}
		
		System.out.println();
		System.out.println();
		
		// Testing for the searchTree function
		// Allow user to enter a score
		// Will print out the URL, the score, and its color
		System.out.println(tree.sortedScores.toString());
		System.out.print("Search for URLs by scores, please enter a score from above: ");
		int searchScore = in.nextInt();
		
		Node target = tree.treeSearch(tree.root, searchScore);
		String targetURL = gotUrls.get(target.key);
		
		System.out.print("Target URL: " + targetURL + " | [Score]: " + target.key + " | [Color]:" + target.color);
		
		System.out.println();
		System.out.println();
		
		// Testing for the deletion of RB tree
		// Allow user to enter a score that needs to be deleted
		// Will print out the URLs without the deleted URL and score and color
		
		System.out.println();
		System.out.println();
		
		System.out.println(tree.sortedScores.toString());
		System.out.print("Please enter a URL score you want to delete from above URL scores: ");
		int deleteScore = in.nextInt();
		
		Node deletingNode = tree.treeSearch(tree.root, deleteScore);
		tree.RBDelete(tree, deletingNode);
		
		System.out.println("************** 30 sorted URLs with Index starting at 1 and Scores after delete *************");
		for(int scores:tree.sortedScores)
		{
			String color = tree.colors.get(index9);
			System.out.println(index3 + ". " + gotUrls.get(scores) + " | [Scores]: " + scores + " | [Color]: " + color);
			index9++;
			index3++;
		}		
	}
}
